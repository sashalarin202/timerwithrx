{"version":3,"sources":["App.js","index.js"],"names":["App","useState","sec","setSec","status","setStatus","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","start","useCallback","stop","reset","wait","className","Date","toISOString","slice","type","onClick","onDoubleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAKe,SAASA,IAAO,IAAD,EACNC,mBAAS,GADH,mBACrBC,EADqB,KAChBC,EADgB,OAEAF,mBAAS,QAFT,mBAErBG,EAFqB,KAEbC,EAFa,KAI5BC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAUzB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXR,GACFD,GAAO,SAAAU,GAAG,OAAIA,EAAM,UAInB,WACLN,EAAaO,OAEbP,EAAaQ,cAEd,CAACX,IAEJ,IAAMY,EAAQC,uBAAY,WACxBZ,EAAU,SACT,IAEGa,EAAOD,uBAAY,WACvBZ,EAAU,QACVF,EAAO,KACN,IAEGgB,EAAQF,uBAAY,WACxBd,EAAO,KACN,IAEGiB,EAAOH,uBAAY,WACvBZ,EAAU,UACT,IAEH,OACE,sBAAKgB,UAAU,MAAf,UACE,sBAAMA,UAAU,QAAhB,SACG,IAAIC,KAAKpB,GAAKqB,cAAcC,MAAM,GAAI,MAEzC,oCACE,wBAAQC,KAAK,SAASJ,UAAU,eAAeK,QAASV,EAAxD,mBAGA,wBAAQS,KAAK,SAASJ,UAAU,cAAcK,QAASR,EAAvD,kBAGA,wBAAQO,KAAK,SAASC,QAASP,EAA/B,mBACA,wBAAQM,KAAK,SAASE,cAAeP,EAArC,wBCrDRQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6098a4a7.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState('stop');\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === 'run') {\n          setSec(val => val + 1000);\n        }\n      });\n\n    return () => {\n      unsubscribe$.next();\n\n      unsubscribe$.complete();\n    };\n  }, [status]);\n\n  const start = useCallback(() => {\n    setStatus('run');\n  }, []);\n\n  const stop = useCallback(() => {\n    setStatus('stop');\n    setSec(0);\n  }, []);\n\n  const reset = useCallback(() => {\n    setSec(0);\n  }, []);\n\n  const wait = useCallback(() => {\n    setStatus('wait');\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <span className=\"clock\">\n        {new Date(sec).toISOString().slice(11, 19)}\n      </span>\n      <section>\n        <button type=\"button\" className=\"start-button\" onClick={start}>\n          Start\n        </button>\n        <button type=\"button\" className=\"stop-button\" onClick={stop}>\n          Stop\n        </button>\n        <button type=\"button\" onClick={reset}>Reset</button>\n        <button type=\"button\" onDoubleClick={wait}>Wait</button>\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}